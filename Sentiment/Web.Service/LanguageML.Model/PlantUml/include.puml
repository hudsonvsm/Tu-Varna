@startuml
class Constants <<static>> {
    + {static} TrainDataURL : string <<get>> <<set>> = @"../LanguageML.Model/Data/train.data.tsv"
    + {static} ModelFilePath : string <<get>> <<set>> = @"../../../../LanguageML.Model/MLModel.zip"
}
class ConsumeLanguageModel {
    + {static} Predict(input:ModelInput) : ModelOutput
    + {static} CreatePredictionEngine() : PredictionEngine<ModelInput, ModelOutput>
}
class "Lazy`1"<T> {
}
ConsumeLanguageModel o-> "PredictionEngine<PredictionEngine<ModelInput, ModelOutput>>" "Lazy`1"
class LanguageMLModelBuilder <<static>> {
    + {static} Init() : void
    + {static} InitSQL() : void
    + {static} LoadDataFromFile() : TrainTestData
    + {static} LoadDataFromSQL() : TrainTestData
    + {static} CreateModel(trainingTestDataView:TrainTestData) : void
    + {static} BuildTrainingPipeline(mlContext:MLContext) : IEstimator<ITransformer>
    + {static} TrainModel(trainingDataView:IDataView, trainingPipeline:IEstimator<ITransformer>) : ITransformer
    - {static} Evaluate(mlContext:MLContext, trainingDataView:IDataView, trainingPipeline:IEstimator<ITransformer>) : void
    - {static} SaveModel(mlContext:MLContext, mlModel:ITransformer, modelRelativePath:string, modelInputSchema:DataViewSchema) : void
    + {static} GetAbsolutePath(relativePath:string) : string
    + {static} PrintMulticlassClassificationMetrics(metrics:MulticlassClassificationMetrics) : void
    + {static} PrintMulticlassClassificationFoldsAverageMetrics(crossValResults:IEnumerable<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>>) : void
    + {static} CalculateStandardDeviation(values:IEnumerable<double>) : double
    + {static} CalculateConfidenceInterval95(values:IEnumerable<double>) : double
    + {static} Evaulate() : void
}
LanguageMLModelBuilder o-> "mlContext" MLContext
class ModelInput {
    + Language : string <<get>> <<set>>
    + Text : string <<get>> <<set>>
}
class ModelOutput {
    + Prediction : string <<get>> <<set>>
}
@enduml
